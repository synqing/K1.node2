{
  "name": "Emotiscope Metronome",
  "description": "Beat indicator pattern that pulses with detected tempo. Each tempo bin gets a dot that moves with beat phase, scaled by tempo magnitude. Creates polyrhythmic visual feedback for detected beat frequencies.",
  "artistic_intent": "Display the beat detection confidence and tempo detection as visual pulses. Multiple tempo dots can pulse independently, revealing the polyrhythmic complexity of the music.",
  "emotiscope_source": "metronome.h - Tempo-synced pulse/flash pattern",
  "audio_inputs": "tempi[64].phase - beat phase for each tempo bin; tempi_smooth[64] - smoothed magnitude for each tempo bin; tempi_power_sum - normalization for contribution calculation",
  "palette_data": [
    [0, 0, 0, 0],
    [64, 100, 100, 255],
    [127, 0, 255, 100],
    [191, 255, 100, 0],
    [255, 255, 255, 255]
  ],
  "nodes": [
    {
      "id": "position",
      "type": "position_gradient",
      "description": "LED position 0-1 for mapping tempo bins"
    },
    {
      "id": "tempo_beat",
      "type": "beat",
      "parameters": { "tempo_bin": 32 },
      "description": "Get primary beat phase (middle tempo range ~120 BPM equivalent)"
    },
    {
      "id": "tempo_magnitude",
      "type": "spectrum_range",
      "parameters": { "start_bin": 0, "end_bin": 63 },
      "description": "Sum of all tempo magnitudes for normalization"
    },
    {
      "id": "beat_sin",
      "type": "sin",
      "inputs": ["tempo_beat"],
      "description": "Convert beat phase to sinusoidal pulse"
    },
    {
      "id": "pulse_amplitude",
      "type": "multiply",
      "inputs": ["beat_sin", "tempo_magnitude"],
      "description": "Scale pulse by tempo magnitude contribution"
    },
    {
      "id": "dot_position",
      "type": "scale",
      "inputs": ["pulse_amplitude"],
      "parameters": { "factor": 0.5 },
      "description": "Scale pulse to 0-1 position range (0.5 center +/- amplitude)"
    },
    {
      "id": "dot_position_offset",
      "type": "add",
      "inputs": ["dot_position"],
      "parameters": { "value": 0.5 },
      "description": "Offset pulse to center (0.5) so it oscillates around middle"
    },
    {
      "id": "hue_from_tempo",
      "type": "palette_interpolate",
      "inputs": ["position"],
      "description": "Map tempo bin position to hue"
    },
    {
      "id": "output",
      "type": "output",
      "description": "Write metronome pulse to LED array"
    }
  ],
  "wires": [
    { "from": "tempo_beat", "to": "beat_sin" },
    { "from": "beat_sin", "to": "pulse_amplitude" },
    { "from": "tempo_magnitude", "to": "pulse_amplitude" },
    { "from": "pulse_amplitude", "to": "dot_position" },
    { "from": "dot_position", "to": "dot_position_offset" },
    { "from": "position", "to": "hue_from_tempo" },
    { "from": "dot_position_offset", "to": "output" },
    { "from": "hue_from_tempo", "to": "output" }
  ],
  "notes": {
    "dot_rendering": "Emotiscope uses fx_dots structure with draw_dot() function for precise dot rendering. K1 node system operates on continuous LED fields, not discrete dots. This graph approximates dots as positional brightness peaks.",
    "polyrhythm_limitation": "Original iterates through all 64 tempo bins independently, drawing separate dots for each. K1 node system would require 64 parallel subgraphs to replicate this. Current graph uses a single representative beat.",
    "phase_calculation": "Original: sine = sin(tempi[i].phase + PI/2); clamped to [-1, 1]; then scaled to position. Current graph uses standard sin output [-1, 1].",
    "contribution_metric": "Original normalizes by tempi_power_sum and squares magnitude for emphasis. Node graph uses simple magnitude scaling as approximation.",
    "mirror_mode": "Original supports mirror mode where dot_pos is adjusted and symmetric dots are drawn. K1 graph operates on full LED array; mirror would need post-processing.",
    "algorithm": "For each tempo bin: magnitude_contribution = (magnitude / power_sum) * magnitude; pulse = sin(phase + PI/2) * 1.5; dot_pos = clamp(pulse * sqrt(contribution) + 0.5); draw at proportional LED position with magnitude opacity"
  }
}
