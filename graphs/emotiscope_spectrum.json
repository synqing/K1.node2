{
  "name": "Emotiscope Spectrum",
  "description": "Frequency spectrum visualization mapped across LED strip. Maps 64 frequency bins across LED positions with optional mirror mode. Dynamically colored based on frequency position.",
  "artistic_intent": "Visualize audio frequency content across the entire spectrum. The mirror mode creates a symmetric effect from the center outward, while normal mode shows a linear frequency sweep.",
  "emotiscope_source": "spectrum.h - Position-mapped spectrum interpolation with optional mirror mode",
  "audio_inputs": "spectrogram_smooth[64] - smoothed frequency magnitudes",
  "palette_data": [
    [0, 0, 0, 0],
    [32, 255, 0, 0],
    [64, 255, 255, 0],
    [96, 0, 255, 0],
    [128, 0, 255, 255],
    [160, 0, 0, 255],
    [192, 255, 0, 255],
    [255, 255, 255, 255]
  ],
  "nodes": [
    {
      "id": "position",
      "type": "position_gradient",
      "description": "LED position 0-1 (used for hue mapping)"
    },
    {
      "id": "spectrum",
      "type": "spectrum_interpolate",
      "parameters": { "start_bin": 0, "end_bin": 63 },
      "description": "Map all 64 frequency bins across LED positions with interpolation"
    },
    {
      "id": "hue_from_position",
      "type": "palette_interpolate",
      "inputs": ["position"],
      "description": "Map LED position to hue via palette (red->yellow->green->cyan->blue->magenta)"
    },
    {
      "id": "output",
      "type": "output",
      "description": "Write frequency-colored spectrum to LED array"
    }
  ],
  "wires": [
    { "from": "position", "to": "hue_from_position" },
    { "from": "spectrum", "to": "output" },
    { "from": "hue_from_position", "to": "output" }
  ],
  "notes": {
    "mirror_mode": "K1 node system does not directly support mirror mode. To enable mirror mode, this graph should be used with a post-processing step in the firmware that mirrors the output. Alternatively, use only the first half of LEDs and mirror in hardware.",
    "algorithm": "For each LED at position i: progress = i / NUM_LEDS; magnitude = interpolate(progress, spectrogram_smooth[0..63]); color = hsv(position_to_hue(progress), saturation, magnitude)",
    "interpolation": "Linear interpolation between neighboring frequency bins maps continuous LED positions to discrete 64-bin spectrogram data"
  }
}
