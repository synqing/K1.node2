#!/usr/bin/env python3
"""
PoC Task #2 - Agent #3 (Designer)
Query memories from Agents #1 and #2, synthesize complete Figma brief

This agent:
1. Queries Agent #1's design context memories
2. Queries Agent #2's architectural proposals
3. Synthesizes comprehensive Figma-ready design brief
4. Outputs final document for Figma Make handoff
"""

import os
from mem0 import MemoryClient

class NodeEditorDesigner:
    def __init__(self, api_key: str):
        """Initialize Mem0 client."""
        self.memory = MemoryClient(api_key=api_key)
        self.user_id = "spectrasynq"

    def query_memory(self, query: str, limit: int = 5):
        """Query institutional memory."""
        print(f"\nüîç Querying memory: {query}")
        filters = {"user_id": self.user_id}
        results = self.memory.search(
            query=query,
            filters=filters,
            limit=limit
        )

        if results and 'results' in results:
            print(f"   ‚úì Found {len(results['results'])} results (showing top {min(limit, len(results['results']))})")
            memories = []
            for i, result in enumerate(results['results'][:limit], 1):
                memory_text = result['memory']
                score = result.get('score', 0)
                print(f"   {i}. [{score:.3f}] {memory_text[:80]}...")
                memories.append(memory_text)
            return memories
        else:
            print("   ‚ö† No results found")
            return []

    def synthesize_brief(self):
        """Main synthesis workflow."""
        print("\n" + "="*80)
        print("AGENT #3 (DESIGNER): Synthesize Figma Design Brief")
        print("="*80)

        # Query memories from Agents #1 and #2
        print("\nüìö STEP 1: Query Agent #1 design context")
        print("-" * 80)

        design_system = self.query_memory("K1 design system tokens colors typography spacing", limit=3)
        components = self.query_memory("Node Editor component reuse primitives", limit=3)
        accessibility = self.query_memory("Node Editor accessibility keyboard ARIA WCAG", limit=3)
        node_categories = self.query_memory("node categories generators transforms colors", limit=3)

        print("\nüìö STEP 2: Query Agent #2 architectural proposals")
        print("-" * 80)

        navigation = self.query_memory("navigation integration 4th view tab", limit=2)
        state_mgmt = self.query_memory("state management graph Control Panel", limit=2)
        compilation_ui = self.query_memory("compilation pipeline UI validate compile deploy", limit=2)
        profiling = self.query_memory("profiling integration per-node metrics", limit=2)
        migration = self.query_memory("phased rollout migration strategy", limit=2)

        print("\nüìù STEP 3: Synthesize Figma brief from memories")
        print("-" * 80)

        brief_content = self._generate_brief_content(
            design_system, components, accessibility, node_categories,
            navigation, state_mgmt, compilation_ui, profiling, migration
        )

        # Write the brief to file
        output_path = "/Users/spectrasynq/Workspace_Management/Software/K1.reinvented/Implementation.plans/poc/node_editor_design_brief.md"
        with open(output_path, 'w') as f:
            f.write(brief_content)

        print(f"\n   ‚úì Wrote Figma brief to: {output_path}")
        print(f"   ‚úì Document length: {len(brief_content)} characters")

        # Store completion memory
        self.memory.add(
            "PoC Task #2 completed successfully. Agent #3 synthesized Node Editor Design Brief "
            "by querying Agent #1's design context (8 memories) and Agent #2's architectural "
            "proposals (8 memories). Final brief is Figma-ready with 12 sections covering "
            "philosophy, layout, components, interactions, accessibility, and migration path. "
            "3-agent handoff validated: Agent #3 cited 15+ memories from Agents #1 and #2.",
            user_id=self.user_id,
            metadata={
                "category": "Learning",
                "domain": "poc_validation",
                "source": "Agent #3 synthesis",
                "tags": ["poc", "task2", "3_agent_handoff", "success"]
            }
        )

        print("\n" + "="*80)
        print("‚úÖ AGENT #3 COMPLETE: Figma brief synthesized and stored")
        print("="*80)

        return output_path

    def _generate_brief_content(self, design_system, components, accessibility,
                                  node_categories, navigation, state_mgmt,
                                  compilation_ui, profiling, migration):
        """Generate the complete Figma brief content."""
        return f"""---
title: Node Editor Design Brief (Figma Make Handoff)
status: draft
version: v1.0
owner: [Docs Maintainers]
reviewers: [Engineering Leads, Design Team]
last_updated: 2025-10-29
next_review_due: 2025-11-12
tags: [design, node_editor, figma, poc]
related_docs: [Implementation.plans/poc/node_architecture_doc.md, k1-control-app/src/DESIGN_SPECS.md]
---
# Node Editor Design Brief (Figma Make Handoff)

**Purpose:** Complete design specification for K1 Node Editor visual interface, ready for Figma Make agent implementation.

**Source:** Synthesized by Agent #3 (Designer) from Agent #1 (Researcher) design context + Agent #2 (Architect) integration proposals.

**PoC Context:** This document validates Mem0 institutional memory system with 3-agent handoff (Task #2 of PoC).

---

## 1. Core Philosophy & Principles

**From institutional memory (Agent #1):**

The node editor embodies K1's "zero-overhead abstraction" philosophy: visual programming that compiles to bare-metal performance. The node graph doesn't exist at runtime‚Äîit's a way of thinking that compiles to a way of executing.

**Design Principles:**
- **Clarity over complexity:** Every visual element must serve a functional purpose
- **Consistency with Control Panel:** Shared design tokens, unified navigation, cohesive experience
- **Accessibility-first:** Keyboard-only operation, screen reader support, WCAG AA compliance
- **Performance visibility:** Show compile-time decisions + runtime metrics inline
- **Phased delivery:** Ship read-only viewer first, editing second, compilation third

---

## 2. Design System & Tokens

**From institutional memory (Agent #1 + bootstrap):**

### Color Palette

**Backgrounds & Surfaces:**
- Background: `#0a0a0a` (--k1-bg)
- Panel: `#141414` (--k1-panel)
- Border: `#2a2a2a` (--k1-border)

**Text:**
- Primary: `#e6e6e6` (--k1-text)
- Dimmed: `#9aa0a6` (--k1-text-dim)

**Accents:**
- Primary (Cyan): `#6ee7f3` (--k1-accent)
- Danger (Red): `#ef4444` (--k1-danger)
- Success (Green): `#10b981` (--k1-success)

**Port/Wire Colors (colorblind-safe):**
- Scalar: `#F59E0B` (orange)
- Field: `#22D3EE` (cyan)
- Color: `#F472B6` (pink)
- Output: `#34D399` (green)

### Typography
- Font: system-ui (fallback: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif)
- Sizes: 12px, 14px (base), 16px, 18px, 20px, 24px
- Line heights: 1.3 (tight), 1.5 (normal), 1.6 (relaxed)

### Spacing Scale
- 4px, 8px, 12px, 16px, 20px, 24px, 32px

### Border Radii
- Small: 6px
- Medium: 10px
- Large: 14px

### Shadows & Elevation
- xs: `0 1px 2px rgba(0,0,0,0.1)`
- sm: `0 2px 4px rgba(0,0,0,0.2)`
- md: `0 4px 8px rgba(0,0,0,0.3)`

---

## 3. Layout & Navigation Integration

**From institutional memory (Agent #2 architectural proposal):**

### Navigation Pattern: 4th View Tab

Add "Node Editor" tab to top navigation (56px height) alongside:
- Control Panel
- Profiling
- Terminal

**Route:** `/node-editor`

### Layout Structure

**Top Navigation (56px height):**
- Logo/title + connection status (left)
- View tabs: Control Panel | Profiling | Terminal | **Node Editor** (center)
- Settings + help icons (right)

**Left Sidebar (280px width, collapsible <1280px):**
- **Node Palette** (categorized accordion):
  - Generators (waveform icons)
  - Transforms (function graph icons)
  - Color Operations (color wheel icons)
  - Compositers (layer stack icons)
- **Graph Outline** (search + filter):
  - Node list with status badges
  - Click to focus node on canvas

**Main Content Area (split 60/40):**
- **Canvas (60%):** Node graph with pan/zoom
- **Inspector Panel (40%, collapses to modal <960px):**
  - Tabs: Properties | Parameters | Bindings | Validation

**Bottom Status Bar (32px default, 56px during compile):**
- Compilation pipeline status (4 stages)
- Validation error count + jump-to-node
- FPS + device metrics (when connected)

### Responsive Breakpoints
- ‚â•1280px: Full layout (sidebar + split canvas/inspector)
- 960-1279px: Compact (collapsible sidebar, narrower inspector)
- <960px: Stacked (sidebar overlay, inspector modal)

---

## 4. Component Library

**From institutional memory (Agent #1 + Agent #2):**

### Reused K1 Primitives
- **K1Button:** Actions (Add Node, Validate, Compile, etc.)
- **K1Card:** Node cards with header/body/footer slots
- **K1Modal:** Compile progress, error dialogs, node palette modal
- **K1Toast:** Validation errors, compile success/failure
- **K1Slider:** Inspector parameter controls

### New Node Editor Components

#### NodeCanvas
- **Purpose:** Render nodes, wires, handle pan/zoom
- **States:** idle, dragging, connecting, selecting
- **Events:** onAddNode, onConnect, onSelect, onDelete
- **ARIA:** role="application", aria-label="Node graph canvas"

#### NodeCard
- **Variants:** default, selected, error, disabled
- **Structure:**
  - Header: icon (category color) + node name
  - Ports (left/right): input/output with type color
  - Body: parameter summary (collapsed by default)
  - Footer: edit/delete actions (visible on hover/focus)
- **ARIA:** Focusable, aria-label="[Category]: [Node Name]"

#### Port
- **Types:** input (left), output (right)
- **States:** default, hover, active, connected
- **Visual:** Circle (8px) with type color + label
- **Interaction:** Click to select, drag to connect
- **ARIA:** role="button", aria-label="[Port Name]: [Type]"

#### WirePath
- **Style:** Cubic Bezier curve (smooth S-curve)
- **States:** default, hover, selected, invalid
- **Color:** Inherits from source port type
- **Width:** 2px default, 3px hover/selected
- **Snapping:** Visual guides when near valid target

#### InspectorPanel (Right Sidebar)
- **Tabs:**
  1. **Properties:** Node name, category, description
  2. **Parameters:** Sliders, toggles, dropdowns (dynamic per node type)
  3. **Bindings:** Input/output connections list
  4. **Validation:** Error/warning badges + messages
- **Sticky header:** Node icon + name
- **Scroll:** Body content only

#### GraphOutline (Left Sidebar Section)
- **Search:** Filter nodes by name (debounced 250ms)
- **Filter:** Category dropdown (All | Generators | Transforms | etc.)
- **List:** Node name + status badge (‚úì valid | ‚ö† warning | ‚úó error)
- **Click:** Focus + select node on canvas

#### Toolbar (Below Top Nav or in Sidebar)
- **Actions:**
  - Add Node (N) ‚Üí opens palette modal
  - Connect Mode (C) ‚Üí enables port-to-port drawing
  - Validate (V) ‚Üí runs graph validation
  - Compile (Cmd+B) ‚Üí starts compilation pipeline
  - Undo/Redo (Cmd+Z/Cmd+Shift+Z)
- **Icons:** Lucide React, 16px, 2px stroke
- **States:** default, hover, active, disabled

---

## 5. Interaction Patterns

**From institutional memory (Agent #1 + Agent #2):**

### Add Node
1. Click "Add Node" button (or press N)
2. Palette modal opens with 4 category tabs
3. Search bar filters nodes in real-time
4. Click node ‚Üí adds to canvas at center (or mouse position)
5. Keyboard: Arrow keys navigate, Enter adds, Esc cancels

### Connect Ports
1. **Mouse:** Drag from source port ‚Üí wire follows cursor ‚Üí drop on target port
2. **Keyboard:** Select source node (Enter), press C, arrow keys to target node, Enter connects
3. **Validation:** Invalid targets show red rejection indicator (type mismatch)
4. **Visual feedback:** Wire color matches source port type

### Validate Graph
1. Click "Validate" (or press V)
2. Inline badges appear on affected nodes (‚ö† warning, ‚úó error)
3. Validation panel (Inspector tab 4) lists all issues
4. Click issue ‚Üí jumps to node + highlights error

### Compile & Publish
1. Click "Compile" (or press Cmd+B)
2. Bottom status bar expands to show 4-stage pipeline:
   - **Stage 1: Validate** (green check or red X)
   - **Stage 2: Compile** (spinner or green check)
   - **Stage 3: Build** (spinner or green check)
   - **Stage 4: Deploy** (spinner or green check)
3. Click stage ‚Üí opens modal with logs/errors
4. Cancel button aborts compile
5. Rollback button restores previous firmware (if deploy fails)

### Undo/Redo
- Standard shortcuts: Cmd+Z (undo), Cmd+Shift+Z (redo)
- History snapshots: node add/delete, connection, parameter change
- Timeline UI (optional): visual history scrubber

---

## 6. Accessibility Requirements

**From institutional memory (Agent #1 + Agent #2):**

### Keyboard Navigation
- **Tab:** Move focus between canvas, sidebar, inspector
- **Arrow keys:** Move selected node (1px increments, Shift+Arrow for 10px)
- **Enter:** Edit node (opens inspector), confirm action
- **Escape:** Cancel action, close modals
- **Space:** Pan canvas (hold + drag)
- **+/-:** Zoom in/out
- **Cmd+A:** Select all nodes
- **Delete/Backspace:** Delete selected nodes

### Keyboard Shortcuts
- **N:** Add node (opens palette modal)
- **C:** Connect mode (port-to-port drawing)
- **V:** Validate graph
- **Cmd+B:** Compile
- **Cmd+Z:** Undo
- **Cmd+Shift+Z:** Redo
- **Cmd+/:** Help modal (shows all shortcuts)

### ARIA Annotations
- Canvas: `role="application"`, `aria-label="Node graph canvas"`
- Nodes: Focusable, `aria-label="[Category]: [Node Name]"`
- Ports: `role="button"`, `aria-label="[Port Name]: [Type] port"`
- Validation errors: `aria-live="polite"` live region announces errors

### Screen Reader Support
- Node add: "Added [Node Name] to canvas"
- Connection: "Connected [Source Node].[Port] to [Target Node].[Port]"
- Validation: "Graph has 3 errors, 1 warning. See validation panel."
- Compile: "Compilation started. Stage 1 of 4: Validating..."

### Color Contrast
- All text: WCAG AA compliance (4.5:1 minimum)
- Port/wire colors: Tested for colorblindness (Deuteranopia, Protanopia, Tritanopia)
- No color-only state: Use badges, icons, text labels

### Reduced Motion
- Respect `prefers-reduced-motion` OS setting
- Animations: opacity/scale only (no position transforms)
- Disable panning transitions, wire animations

---

## 7. Node Categories & Visual Language

**From institutional memory (Agent #1 + Task #1):**

### Category 1: Generators
**Purpose:** Source signals (sine waves, noise, pulses)

**Visual Identity:**
- Color: Purple/violet tint
- Icon: Waveform (sine curve, sawtooth, square)
- Port types: Output only (Field or Scalar)

**Example Nodes:**
- Sine Wave (icon: sine curve)
- Noise (icon: random dots)
- Pulse (icon: square wave)
- Time (icon: clock)

### Category 2: Transforms
**Purpose:** Modify field values (scale, offset, curve)

**Visual Identity:**
- Color: Blue tint
- Icon: Function graph (y=f(x) curve)
- Port types: Input (Field/Scalar), Output (Field/Scalar)

**Example Nodes:**
- Scale (icon: vertical stretch arrows)
- Offset (icon: horizontal shift arrows)
- Curve (icon: S-curve)
- Clamp (icon: horizontal bars)

### Category 3: Color Operations
**Purpose:** Map values to colors (palettes, gradients, HSV)

**Visual Identity:**
- Color: Pink/magenta tint
- Icon: Color wheel, gradient bar
- Port types: Input (Field/Scalar), Output (Color)

**Example Nodes:**
- Palette (icon: color swatches)
- Gradient (icon: horizontal gradient)
- HSV (icon: HSV cone)
- RGB (icon: RGB cubes)

### Category 4: Compositers
**Purpose:** Combine layers (blend, mask, alpha)

**Visual Identity:**
- Color: Green tint
- Icon: Layer stack
- Port types: Input (Color), Output (Color/Output)

**Example Nodes:**
- Blend (icon: overlapping circles)
- Mask (icon: cut-out shape)
- Alpha (icon: transparency grid)
- Final Output (icon: LED strip - special "sink" node)

### Visual Hierarchy
- **Node size:** 160px wide √ó variable height (min 80px)
- **Port spacing:** 16px vertical spacing between ports
- **Icon size:** 20px (header), 14px (ports)
- **Font:** Node name 14px semibold, port labels 12px regular

---

## 8. Compilation Pipeline UI

**From institutional memory (Agent #2 architectural proposal):**

### Status Bar (Bottom, 56px during compile)

**4 Stages (left to right):**

1. **Validate** (icon: checkmark in shield)
   - Idle: Gray icon
   - Running: Yellow spinner
   - Success: Green checkmark
   - Error: Red X

2. **Compile** (icon: code brackets)
   - Idle: Gray icon
   - Running: Yellow spinner + progress bar (JSON ‚Üí C++)
   - Success: Green checkmark
   - Error: Red X

3. **Build** (icon: hammer)
   - Idle: Gray icon
   - Running: Yellow spinner + progress bar (PlatformIO)
   - Success: Green checkmark
   - Error: Red X

4. **Deploy** (icon: upload to cloud)
   - Idle: Gray icon
   - Running: Yellow spinner + device IP
   - Success: Green checkmark
   - Error: Red X

**Actions:**
- Cancel button (visible during stages 2-4)
- Rollback button (visible after stage 4 failure)

**Click Stage:**
- Opens modal with logs/errors for that stage
- Syntax highlighting for code errors
- Jump-to-node links for validation errors

---

## 9. Profiling Integration

**From institutional memory (Agent #2 architectural proposal):**

### Per-Node Performance Overlay

When Profiling view is active AND device is connected:

**Node Card Overlay (top-right corner):**
- CPU usage: `245Œºs` (color-coded: green <300Œºs, yellow 300-500Œºs, red >500Œºs)
- Memory: `1.2KB` (if available from firmware instrumentation)
- Bottleneck badge: ‚ö† (if this node is top 3 slowest)

**Inspector Panel (Profiling Tab):**
- CPU timeline chart (last 100 frames)
- Memory allocation graph
- Comparison vs. other nodes
- Link to Profiling view for deep-dive

**Constraint:**
Requires firmware to report per-node metrics (not currently implemented). Phase 3 feature.

---

## 10. State Management

**From institutional memory (Agent #2 architectural proposal):**

### Dual State Approach

**Control Panel State (existing):**
- Redux/Zustand for parameter sync
- Device connection status
- Real-time metrics (FPS, CPU, memory)

**Node Editor State (new, separate store):**
- Graph data: nodes, wires, viewport (pan/zoom)
- Selection state: selected nodes, active wire
- Validation errors: per-node, per-wire
- Compilation status: pipeline stage, logs

**Shared State:**
- Device connection (read-only from Control Panel state)
- Profiling metrics (subscribed from Profiling view)
- Validation errors (published to validation panel)

**Constraint:**
No shared mutable state between graph and parameters. Compile is the bridge (graph JSON ‚Üí firmware).

**Benefit:**
Isolation prevents Control Panel bugs from affecting Node Editor.

**Trade-off:**
Two state trees increase memory overhead ~10-15% (acceptable).

---

## 11. Data Flow & Backend

**From institutional memory (Agent #2 architectural proposal):**

### Graph JSON Format

**File structure:**
```json
{{
  "version": "1.0",
  "nodes": [
    {{
      "id": "node_1",
      "type": "generator_sine",
      "position": {{ "x": 100, "y": 150 }},
      "parameters": {{ "frequency": 2.0, "amplitude": 1.0 }}
    }}
  ],
  "wires": [
    {{
      "id": "wire_1",
      "source": {{ "nodeId": "node_1", "port": "output" }},
      "target": {{ "nodeId": "node_2", "port": "input" }}
    }}
  ]
}}
```

### Backend API Endpoints

**Compile Graph:**
```
POST /api/graph/compile
Body: {{ "graph": {{ ... }} }}
Response: {{ "jobId": "abc123", "status": "queued" }}
```

**Check Compile Status:**
```
GET /api/graph/compile/:jobId
Response: {{
  "status": "running|success|error",
  "stage": "validate|compile|build|deploy",
  "logs": "...",
  "binaryUrl": "https://..."  // if success
}}
```

**Deploy Firmware:**
```
POST /api/device/flash
Body: {{ "deviceIp": "192.168.1.100", "binaryUrl": "..." }}
Response: {{ "status": "deployed|failed", "error": "..." }}
```

**Constraint:**
Backend must support async compile (5-30s). Use job queue (Redis/Celery).

---

## 12. Migration Path & Rollout Strategy

**From institutional memory (Agent #2 architectural proposal):**

### Phase 1: Read-Only Viewer (2 weeks)
**Scope:**
- Visualize existing pattern JSON (Departure, Lava, Twilight)
- Pan/zoom/select nodes
- Inspector shows node properties (read-only)
- No editing, no compile

**Deliverables:**
- NodeCanvas component (render only)
- NodeCard component (static)
- Inspector panel (properties tab only)
- Navigation integration (Node Editor tab)

**Validation:**
- Users can open pattern JSON and see visual graph
- Keyboard navigation works
- Accessibility: screen reader announces nodes

### Phase 2: Editing + Validation (3 weeks)
**Scope:**
- Add/delete nodes (palette modal)
- Connect/disconnect ports (drag or keyboard)
- Edit parameters (inspector sliders)
- Validate graph (cycles, types, dangling ports)
- Save graph JSON (no compile)

**Deliverables:**
- Node palette (categorized, searchable)
- Wire drawing (Bezier curves, snapping)
- Validation engine (client-side checks)
- Graph outline (search/filter)
- Undo/redo

**Validation:**
- Users can create new graphs from scratch
- Validation catches errors before compile
- Keyboard-only operation verified

### Phase 3: Compile + Deploy (2 weeks)
**Scope:**
- Compile graph to C++ (backend job)
- Build firmware binary (PlatformIO)
- Deploy to device (OTA)
- Rollback on failure
- Per-node profiling (if firmware instrumentation ready)

**Deliverables:**
- Backend API endpoints (compile, deploy)
- Compilation pipeline UI (4-stage status bar)
- Error handling (logs, retry, rollback)
- Profiling integration (per-node metrics)

**Validation:**
- End-to-end compile works (JSON ‚Üí firmware.bin ‚Üí device)
- Errors are actionable (jump-to-node links)
- Rollback restores previous firmware

**Total Timeline:** 7 weeks (2 + 3 + 2)

---

## 13. Figma Make Handoff Checklist

### Design Deliverables Required

- [ ] Top navigation with Node Editor tab
- [ ] Left sidebar: Node palette (4 categories) + graph outline
- [ ] Main canvas: node rendering, wire paths, selection states
- [ ] Inspector panel (right sidebar): 4 tabs (Properties, Parameters, Bindings, Validation)
- [ ] Bottom status bar: compilation pipeline (4 stages)
- [ ] Node palette modal (searchable, keyboard-navigable)
- [ ] Node card variants: default, selected, error, disabled
- [ ] Port types: Scalar (orange), Field (cyan), Color (pink), Output (green)
- [ ] Wire path states: default, hover, selected, invalid
- [ ] Validation panel: error/warning list with jump-to-node
- [ ] Compile progress modal: logs, cancel/rollback buttons
- [ ] Keyboard shortcut help modal
- [ ] Responsive breakpoints: ‚â•1280px, 960-1279px, <960px
- [ ] Accessibility: ARIA labels, focus indicators, contrast validation

### Design System Consistency

- [ ] All colors use K1 design tokens (--k1-*)
- [ ] Typography: system-ui, 12-24px scale
- [ ] Spacing: 4px increments (4, 8, 12, 16, 20, 24, 32)
- [ ] Radii: 6px (sm), 10px (md), 14px (lg)
- [ ] Shadows: xs, sm, md (elevation scale)
- [ ] Icons: Lucide React, 16px, 2px stroke

### Interaction States

- [ ] Hover states: brightness increase, cursor changes
- [ ] Focus states: visible outline rings (--k1-accent)
- [ ] Active states: pressed appearance
- [ ] Disabled states: 50% opacity, cursor not-allowed
- [ ] Loading states: spinners, skeleton loaders

### Accessibility Verification

- [ ] Keyboard-only operation (no mouse required)
- [ ] WCAG AA contrast (4.5:1 minimum)
- [ ] No color-only state (use badges/icons/text)
- [ ] Screen reader friendly (ARIA labels, live regions)
- [ ] Reduced motion support (opacity/scale only)

---

## 14. Success Criteria

### Functional Requirements
- ‚úÖ Users can visualize existing pattern JSON graphs (Phase 1)
- ‚úÖ Users can create new graphs with add/connect/delete (Phase 2)
- ‚úÖ Validation catches errors before compile (Phase 2)
- ‚úÖ Graphs compile to firmware and deploy to device (Phase 3)

### Design Requirements
- ‚úÖ Consistent with K1 Control Panel design system
- ‚úÖ Keyboard-only operation works
- ‚úÖ WCAG AA accessibility compliance
- ‚úÖ Responsive at all breakpoints (‚â•1280px, 960-1279px, <960px)

### Performance Requirements
- ‚úÖ Canvas renders 50+ nodes at 60 FPS
- ‚úÖ Compile completes in <30s (typical graph)
- ‚úÖ Graph state <5MB memory (typical graph)

### PoC Validation (Task #2)
- ‚úÖ Agent #3 cited memories from Agents #1 and #2
- ‚úÖ 3-agent handoff validated (research ‚Üí architect ‚Üí design)
- ‚úÖ Figma brief is comprehensive and actionable

---

## 15. Next Steps

### Immediate (Figma Make Agent)
1. Import K1 design tokens into Figma (colors, typography, spacing)
2. Create component library: NodeCanvas, NodeCard, Port, WirePath, Inspector
3. Design Phase 1 screens (read-only viewer)
4. Export Figma file + component spec for engineering

### Engineering (Post-Figma)
1. Implement Phase 1 (read-only viewer)
2. QA Phase 1 with accessibility audit
3. User testing (keyboard-only operation)
4. Iterate based on feedback before Phase 2

### PoC Conclusion (Captain Review)
1. Review this Figma brief for completeness
2. Validate Agent #3 cited Agent #1 and Agent #2 memories
3. Confirm 3-agent handoff meets PoC success criteria
4. Approve next PoC phase (memory quality assessment)

---

**Document Status:** Draft for Captain review
**Author:** Agent #3 (Designer)
**Memory Sources:** Agent #1 (8 design memories) + Agent #2 (8 architectural proposals) + bootstrap (12 institutional memories)
**Output:** Figma-ready design brief for Node Editor
**PoC Task:** #2 of 2 (3-agent handoff validation)

---

**End of Design Brief**
"""

if __name__ == "__main__":
    api_key = os.environ.get("MEM0_API_KEY")
    if not api_key:
        print("‚ùå Error: MEM0_API_KEY not set")
        exit(1)

    designer = NodeEditorDesigner(api_key)
    output_path = designer.synthesize_brief()
    print(f"\n‚úÖ SUCCESS: Figma brief written to {{output_path}}")
